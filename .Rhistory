# Set Na values to 0. These occur on the first date of obervations
dum$new_cases[is.na(dum$new_cases)] <- 0
#Use `filter()` to add a column named `new_deaths`
dum$new_deaths = as.numeric(stats::filter(dum$deaths,filter=c(1,-1), sides=1))
# Set NaN values to 0. These occur on the first date of obervations
dum$new_deaths[is.na(dum$new_deaths)] <- 0
# append to dataframe
if (i>1){
df1 <- rbind(df1,dum)
}else{
df1 <- dum
}
i <- i+1
rm(dum)
}
# final new data frame
state_data2 <- df1
#calculate per capita case and death rates
state_data2$pc_new_cases <- state_data2$new_cases / state_data2$Population
state_data2$pc_new_deaths <- state_data2$new_deaths / state_data2$Population
# extracting year and month
month <- data.frame(format(state_data2$date,format="%m/%y"))
# month <- data.frame(format(state_data2$date,format="%m"))
# add as columns to df
# state_data2<-bind_cols(state_data2,year)
state_data2<-bind_cols(state_data2,month)
# sorting columns
state_data3 <- state_data2[,c(1,14,2:13)]
# renaming columns
names(state_data3)[2] <- "month"
# Calculate pc avg cases for each state
state_mnthly_cases = as.data.table(state_data3)[, mean(pc_new_cases), by = .(month,state, Region,Density)]
names(state_mnthly_cases)[4] <- "avg_pc_cases"
# Calculate avg deaths for each state
state_mnthly_deaths = as.data.table(state_data3)[, mean(pc_new_deaths), by = .(month,state,Region,Density)]
names(state_mnthly_deaths)[4] <- "avg_pc_deaths"
# Boxplot of Monthly Cummulative Cases by State
# getting dates in order
dum = unique(state_mnthly_cases$month)
state_mnthly_cases$month <- factor(state_mnthly_cases$month , levels=dum)
state_mnthly_deaths$month <- factor(state_mnthly_deaths$month , levels=dum)
# plotting below
# No coloring
mnthly_case_bplot = ggplot(state_mnthly_cases,aes(month, avg_pc_cases)) +
geom_boxplot()
mnthly_case_bplot + labs(y = "Mean Per Capita Daily Cases by State",
title = "Box Plot of Monthly Per Capita Covid-19 Cases by State")
mnthly_death_bplot = ggplot(state_mnthly_deaths,aes(month, avg_pc_deaths)) + geom_boxplot()
mnthly_death_bplot + labs(y = "Mean Per Capita Daily Deaths by State",
title = "Box Plot of Monthly Capita Covid-19 Deaths by State")
# Color by region
mnthly_case_bplot2 = ggplot(state_mnthly_cases,aes(month, avg_pc_cases)) +
geom_boxplot(aes(color = Region))
mnthly_case_bplot2 + labs(y = "Mean Per Capita Daily Cases by Region",
title = "Box Plot of Monthly Per Capita Covid-19 Cases by Region")
mnthly_death_bplot2 = ggplot(state_mnthly_deaths,aes(month, avg_pc_deaths)) +
geom_boxplot(aes(color = Region))
mnthly_death_bplot2 + labs(y = "Mean Daily Per Capita Deaths by Region",
title = "Box Plot of Monthly Per Capita Covid-19 Deaths by Region")
# Color by density
mnthly_case_bplot3 = ggplot(state_mnthly_cases,aes(month, avg_pc_cases)) +
geom_boxplot(aes(color = Density2))
mnthly_case_bplot2 + labs(y = "Mean Per Capita Daily Cases by Density",
title = "Box Plot of Monthly Per Capita Covid-19 Cases by Density")
mnthly_death_bplot3 = ggplot(state_mnthly_deaths,aes(month, avg_pc_deaths)) +
geom_boxplot(aes(color = Density2))
mnthly_death_bplot2 + labs(y = "Mean Daily Per Capita Deaths by Desnsity",
title = "Box Plot of Monthly Per Capita Covid-19 Deaths by Density")
regions <- state.region
demographics <- state.x77
demographics = data.frame(demographics)
states_info <- data.frame("Name" = states_vect,"Region" = regions,"Pop"=demographics$Population)
options
par(mfrow=c(2,2))
for (val in states_vect)
{
# subset by state
dum <- subset(state_data3, state == val)
if (val == "Alabama"){
plot(dum$date,dum$pc_new_cases,"l",  xlab="Date", ylab="Dly Per Capita Cases",ylim=c(0,0.5e-2))
par(new = TRUE)
plot(dum$date,dum$pc_new_deaths,"l",  xlab="", ylab="",axes = FALSE,col = "dark red")
axis(side=4, col.axis = "dark red",col.ticks = "dark red", ylim=c(0,0.1e-4))
mtext("Daily Per Capita Deaths",side=4,line=3, col = "dark red")
title(val)
}else{
plot(dum$date,dum$pc_new_cases,"l",  xlab="", ylab="",ylim=c(0,0.5e-2))
par(new = TRUE)
plot(dum$date,dum$pc_new_deaths,"l",  xlab="", ylab="",axes = FALSE,col = "dark red")
axis(side=4, col.axis = "dark red",col.ticks = "dark red", ylim=c(0,0.1e-4))
title(val)}
}
View(state_mnthly_cases)
# packages required
# install.packages("gridExtra")
# importing libraries
library(dplyr)
library(tidyverse)
library(data.table)
library(ggplot2)
library(scales)
library(gridExtra)
# read in NYtimes Covid data tables
# Cumulative Daily Cases and Deaths by
# 1 - County Level
cty_data <-read.csv("us-counties.csv")
# 2 - State Level
state_data <-read.csv("us-states.csv")
state_pop <-read.csv("state_pop.csv")
# 3 -
us_data <-read.csv("us.csv")
# transforming date column from CHARACTER to DATE class
cty_data$date <- as.Date(cty_data$date)
state_data$date <- as.Date(state_data$date,format="%Y-%m-%d")
us_data$date <- as.Date(us_data$date)
# filter out dates before March 1st, 2020
cty_data <- base::subset(cty_data,date>"2020-02-29")
state_data <- base::subset(state_data,date>"2020-02-29")
us_data <- base::subset(us_data,date>"2020-02-29")
# Examination of US-wide Temporal Trends
# Use `filter()` to add a column named `new_cases` and 'new_deaths'
us_data$new_cases = as.numeric(stats::filter(us_data$cases,filter=c(1,-1), sides=1))
us_data$new_deaths = as.numeric(stats::filter(us_data$deaths,filter=c(1,-1), sides=1))
# Change first entry fo new deaths and new cases from NA to 0
us_data$new_cases[1]<-0
us_data$new_deaths[1]<-0
# Add Data on Season
season <- c("Spring","Summer","Winter","Fall")
# create df for seasons
season_df = data.frame(c(1:12),c("Winter","Winter","Spring","Spring","Spring","Summer","Summer","Summer","Fall","Fall","Fall","Winter"))
names(season_df)[1] <- "month"
names(season_df)[2] <- "season"
for (i in 1:length(us_data$date))
{
if (month(us_data$date[i]) >= 3 & month(us_data$date[i]) < 6) {
us_data$season[i] = season[1]
} else if (month(us_data$date[i]) >= 6 & month(us_data$date[i]) < 9) {
us_data$season[i] = season[2]
} else if (month(us_data$date[i]) >= 9 & month(us_data$date[i]) < 12) {
us_data$season[i] = season[3]
} else {
us_data$season[i] = season[4]
}
}
us_data$season = as.factor(us_data$season)
## Plotting Below
# Timeseries of Covid Cases and Deaths through time
# Value used to transform the data
p1 <- ggplot(us_data, aes(x = date, y = new_cases)) +
geom_line(color = "darkred") +
labs(title="US Covid-19 Cases and Deaths",  y="Daily New Cases", x="")
p2 <- ggplot(us_data, aes(x = date, y = new_deaths)) +
geom_line(color = "black") +
labs(  y="Daily New Deaths", x="Date")
grid.arrange(p1,p2,nrow=2)
# scatter plot comparison of Cases Vs Deaths
gg <- ggplot(us_data,aes(x = new_cases, y = new_deaths, colour = season)) +
geom_point() +
labs(title="Cases Vs Deaths",subtitle="US Country-wide Covid Counts",y="Daily Deaths", x="Daily Cases")
plot(gg)
## Examining State Spatial Trends
# 1 - Formatting Data
# remove leading character in State_Pop$State
state_pop$State <- substring(state_pop$State,2)
# remove commas from population and convert to numeric
state_pop$Population <- as.numeric(gsub(",","",state_pop$Population))
# add state population data
state_data <- merge(state_data, state_pop, by.x="state", by.y="State")
# get population density
# remove DC from state_pop list
state_pop <-state_pop [-c(9), ]
state.density = state_pop$Population/state.area
## get state regional data
states_info <- data.frame(state.name,state.region,state.density)
names(states_info)[1] <- "Name"
names(states_info)[2] <- "Region"
names(states_info)[3] <- "Density"
# add state region data
state_data <- merge(state_data, states_info, by.x="state", by.y="Name")
# categorize into density groups
for (i in 1:length(state_data$Density))
{
if (state_data$Density[i] <= 200) {
state_data$Density2[i] <- "<=200"
} else if (state_data$Density[i] >  200 & state_data$Density[i] <= 1000) {
state_data$Density2[i] <- "200-1000"
} else {
state_data$Density2[i] <- ">1000"
}
}
# sort by date
state_data<-state_data[order((state_data$date)),]
# Find unique fips values to find unique counties
fips_vect <- unique(cty_data$fips)
# Find unique dates
dates_vect <- unique(cty_data$date)
# find unique states (Exclude territories)
states_vect <-state.name;
# Find number of daily new cases and deaths by state
i <-1
# looping through unique state names
for (val in states_vect)
{
# subset by state
dum <- subset(state_data, state == val)
#Use `filter()` to add a column named `new_cases`
dum$new_cases = as.numeric(stats::filter(dum$cases,filter=c(1,-1), sides=1))
# Set Na values to 0. These occur on the first date of obervations
dum$new_cases[is.na(dum$new_cases)] <- 0
#Use `filter()` to add a column named `new_deaths`
dum$new_deaths = as.numeric(stats::filter(dum$deaths,filter=c(1,-1), sides=1))
# Set NaN values to 0. These occur on the first date of obervations
dum$new_deaths[is.na(dum$new_deaths)] <- 0
# append to dataframe
if (i>1){
df1 <- rbind(df1,dum)
}else{
df1 <- dum
}
i <- i+1
rm(dum)
}
# final new data frame
state_data2 <- df1
#calculate per capita case and death rates
state_data2$pc_new_cases <- state_data2$new_cases / state_data2$Population
state_data2$pc_new_deaths <- state_data2$new_deaths / state_data2$Population
# extracting year and month
month <- data.frame(format(state_data2$date,format="%m/%y"))
# month <- data.frame(format(state_data2$date,format="%m"))
# add as columns to df
# state_data2<-bind_cols(state_data2,year)
state_data2<-bind_cols(state_data2,month)
# sorting columns
state_data3 <- state_data2[,c(1,14,2:13)]
# renaming columns
names(state_data3)[2] <- "month"
# Calculate pc avg cases for each state
state_mnthly_cases = as.data.table(state_data3)[, mean(pc_new_cases), by = .(month,state, Region,Density2)]
names(state_mnthly_cases)[4] <- "avg_pc_cases"
# Calculate avg deaths for each state
state_mnthly_deaths = as.data.table(state_data3)[, mean(pc_new_deaths), by = .(month,state,Region,Density2)]
names(state_mnthly_deaths)[4] <- "avg_pc_deaths"
# Boxplot of Monthly Cummulative Cases by State
# getting dates in order
dum = unique(state_mnthly_cases$month)
state_mnthly_cases$month <- factor(state_mnthly_cases$month , levels=dum)
state_mnthly_deaths$month <- factor(state_mnthly_deaths$month , levels=dum)
# plotting below
# No coloring
mnthly_case_bplot = ggplot(state_mnthly_cases,aes(month, avg_pc_cases)) +
geom_boxplot()
mnthly_case_bplot + labs(y = "Mean Per Capita Daily Cases by State",
title = "Box Plot of Monthly Per Capita Covid-19 Cases by State")
mnthly_death_bplot = ggplot(state_mnthly_deaths,aes(month, avg_pc_deaths)) + geom_boxplot()
mnthly_death_bplot + labs(y = "Mean Per Capita Daily Deaths by State",
title = "Box Plot of Monthly Capita Covid-19 Deaths by State")
# Color by region
mnthly_case_bplot2 = ggplot(state_mnthly_cases,aes(month, avg_pc_cases)) +
geom_boxplot(aes(color = Region))
mnthly_case_bplot2 + labs(y = "Mean Per Capita Daily Cases by Region",
title = "Box Plot of Monthly Per Capita Covid-19 Cases by Region")
mnthly_death_bplot2 = ggplot(state_mnthly_deaths,aes(month, avg_pc_deaths)) +
geom_boxplot(aes(color = Region))
mnthly_death_bplot2 + labs(y = "Mean Daily Per Capita Deaths by Region",
title = "Box Plot of Monthly Per Capita Covid-19 Deaths by Region")
# Color by density
mnthly_case_bplot3 = ggplot(state_mnthly_cases,aes(month, avg_pc_cases)) +
geom_boxplot(aes(color = Density2))
mnthly_case_bplot2 + labs(y = "Mean Per Capita Daily Cases by Density",
title = "Box Plot of Monthly Per Capita Covid-19 Cases by Density")
mnthly_death_bplot3 = ggplot(state_mnthly_deaths,aes(month, avg_pc_deaths)) +
geom_boxplot(aes(color = Density2))
mnthly_death_bplot2 + labs(y = "Mean Daily Per Capita Deaths by Desnsity",
title = "Box Plot of Monthly Per Capita Covid-19 Deaths by Density")
regions <- state.region
demographics <- state.x77
demographics = data.frame(demographics)
states_info <- data.frame("Name" = states_vect,"Region" = regions,"Pop"=demographics$Population)
options
par(mfrow=c(2,2))
for (val in states_vect)
{
# subset by state
dum <- subset(state_data3, state == val)
if (val == "Alabama"){
plot(dum$date,dum$pc_new_cases,"l",  xlab="Date", ylab="Dly Per Capita Cases",ylim=c(0,0.5e-2))
par(new = TRUE)
plot(dum$date,dum$pc_new_deaths,"l",  xlab="", ylab="",axes = FALSE,col = "dark red")
axis(side=4, col.axis = "dark red",col.ticks = "dark red", ylim=c(0,0.1e-4))
mtext("Daily Per Capita Deaths",side=4,line=3, col = "dark red")
title(val)
}else{
plot(dum$date,dum$pc_new_cases,"l",  xlab="", ylab="",ylim=c(0,0.5e-2))
par(new = TRUE)
plot(dum$date,dum$pc_new_deaths,"l",  xlab="", ylab="",axes = FALSE,col = "dark red")
axis(side=4, col.axis = "dark red",col.ticks = "dark red", ylim=c(0,0.1e-4))
title(val)}
}
View(state_mnthly_cases)
# packages required
# install.packages("gridExtra")
# importing libraries
library(dplyr)
library(tidyverse)
library(data.table)
library(ggplot2)
library(scales)
library(gridExtra)
# read in NYtimes Covid data tables
# Cumulative Daily Cases and Deaths by
# 1 - County Level
cty_data <-read.csv("us-counties.csv")
# 2 - State Level
state_data <-read.csv("us-states.csv")
state_pop <-read.csv("state_pop.csv")
# 3 -
us_data <-read.csv("us.csv")
# transforming date column from CHARACTER to DATE class
cty_data$date <- as.Date(cty_data$date)
state_data$date <- as.Date(state_data$date,format="%Y-%m-%d")
us_data$date <- as.Date(us_data$date)
# filter out dates before March 1st, 2020
cty_data <- base::subset(cty_data,date>"2020-02-29")
state_data <- base::subset(state_data,date>"2020-02-29")
us_data <- base::subset(us_data,date>"2020-02-29")
# Examination of US-wide Temporal Trends
# Use `filter()` to add a column named `new_cases` and 'new_deaths'
us_data$new_cases = as.numeric(stats::filter(us_data$cases,filter=c(1,-1), sides=1))
us_data$new_deaths = as.numeric(stats::filter(us_data$deaths,filter=c(1,-1), sides=1))
# Change first entry fo new deaths and new cases from NA to 0
us_data$new_cases[1]<-0
us_data$new_deaths[1]<-0
# Add Data on Season
season <- c("Spring","Summer","Winter","Fall")
# create df for seasons
season_df = data.frame(c(1:12),c("Winter","Winter","Spring","Spring","Spring","Summer","Summer","Summer","Fall","Fall","Fall","Winter"))
names(season_df)[1] <- "month"
names(season_df)[2] <- "season"
for (i in 1:length(us_data$date))
{
if (month(us_data$date[i]) >= 3 & month(us_data$date[i]) < 6) {
us_data$season[i] = season[1]
} else if (month(us_data$date[i]) >= 6 & month(us_data$date[i]) < 9) {
us_data$season[i] = season[2]
} else if (month(us_data$date[i]) >= 9 & month(us_data$date[i]) < 12) {
us_data$season[i] = season[3]
} else {
us_data$season[i] = season[4]
}
}
us_data$season = as.factor(us_data$season)
## Plotting Below
# Timeseries of Covid Cases and Deaths through time
# Value used to transform the data
p1 <- ggplot(us_data, aes(x = date, y = new_cases)) +
geom_line(color = "darkred") +
labs(title="US Covid-19 Cases and Deaths",  y="Daily New Cases", x="")
p2 <- ggplot(us_data, aes(x = date, y = new_deaths)) +
geom_line(color = "black") +
labs(  y="Daily New Deaths", x="Date")
grid.arrange(p1,p2,nrow=2)
# scatter plot comparison of Cases Vs Deaths
gg <- ggplot(us_data,aes(x = new_cases, y = new_deaths, colour = season)) +
geom_point() +
labs(title="Cases Vs Deaths",subtitle="US Country-wide Covid Counts",y="Daily Deaths", x="Daily Cases")
plot(gg)
## Examining State Spatial Trends
# 1 - Formatting Data
# remove leading character in State_Pop$State
state_pop$State <- substring(state_pop$State,2)
# remove commas from population and convert to numeric
state_pop$Population <- as.numeric(gsub(",","",state_pop$Population))
# add state population data
state_data <- merge(state_data, state_pop, by.x="state", by.y="State")
# get population density
# remove DC from state_pop list
state_pop <-state_pop [-c(9), ]
state.density = state_pop$Population/state.area
## get state regional data
states_info <- data.frame(state.name,state.region,state.density)
names(states_info)[1] <- "Name"
names(states_info)[2] <- "Region"
names(states_info)[3] <- "Density"
# add state region data
state_data <- merge(state_data, states_info, by.x="state", by.y="Name")
# categorize into density groups
for (i in 1:length(state_data$Density))
{
if (state_data$Density[i] <= 200) {
state_data$Density2[i] <- "<=200"
} else if (state_data$Density[i] >  200 & state_data$Density[i] <= 1000) {
state_data$Density2[i] <- "200-1000"
} else {
state_data$Density2[i] <- ">1000"
}
}
# sort by date
state_data<-state_data[order((state_data$date)),]
# Find unique fips values to find unique counties
fips_vect <- unique(cty_data$fips)
# Find unique dates
dates_vect <- unique(cty_data$date)
# find unique states (Exclude territories)
states_vect <-state.name;
# Find number of daily new cases and deaths by state
i <-1
# looping through unique state names
for (val in states_vect)
{
# subset by state
dum <- subset(state_data, state == val)
#Use `filter()` to add a column named `new_cases`
dum$new_cases = as.numeric(stats::filter(dum$cases,filter=c(1,-1), sides=1))
# Set Na values to 0. These occur on the first date of obervations
dum$new_cases[is.na(dum$new_cases)] <- 0
#Use `filter()` to add a column named `new_deaths`
dum$new_deaths = as.numeric(stats::filter(dum$deaths,filter=c(1,-1), sides=1))
# Set NaN values to 0. These occur on the first date of obervations
dum$new_deaths[is.na(dum$new_deaths)] <- 0
# append to dataframe
if (i>1){
df1 <- rbind(df1,dum)
}else{
df1 <- dum
}
i <- i+1
rm(dum)
}
# final new data frame
state_data2 <- df1
#calculate per capita case and death rates
state_data2$pc_new_cases <- state_data2$new_cases / state_data2$Population
state_data2$pc_new_deaths <- state_data2$new_deaths / state_data2$Population
# extracting year and month
month <- data.frame(format(state_data2$date,format="%m/%y"))
# month <- data.frame(format(state_data2$date,format="%m"))
# add as columns to df
# state_data2<-bind_cols(state_data2,year)
state_data2<-bind_cols(state_data2,month)
# sorting columns
state_data3 <- state_data2[,c(1,14,2:13)]
# renaming columns
names(state_data3)[2] <- "month"
# Calculate pc avg cases for each state
state_mnthly_cases = as.data.table(state_data3)[, mean(pc_new_cases), by = .(month,state, Region,Density2)]
names(state_mnthly_cases)[5] <- "avg_pc_cases"
# Calculate avg deaths for each state
state_mnthly_deaths = as.data.table(state_data3)[, mean(pc_new_deaths), by = .(month,state,Region,Density2)]
names(state_mnthly_deaths)[5] <- "avg_pc_deaths"
# Boxplot of Monthly Cummulative Cases by State
# getting dates in order
dum = unique(state_mnthly_cases$month)
state_mnthly_cases$month <- factor(state_mnthly_cases$month , levels=dum)
state_mnthly_deaths$month <- factor(state_mnthly_deaths$month , levels=dum)
# plotting below
# No coloring
mnthly_case_bplot = ggplot(state_mnthly_cases,aes(month, avg_pc_cases)) +
geom_boxplot()
mnthly_case_bplot + labs(y = "Mean Per Capita Daily Cases by State",
title = "Box Plot of Monthly Per Capita Covid-19 Cases by State")
mnthly_death_bplot = ggplot(state_mnthly_deaths,aes(month, avg_pc_deaths)) + geom_boxplot()
mnthly_death_bplot + labs(y = "Mean Per Capita Daily Deaths by State",
title = "Box Plot of Monthly Capita Covid-19 Deaths by State")
# Color by region
mnthly_case_bplot2 = ggplot(state_mnthly_cases,aes(month, avg_pc_cases)) +
geom_boxplot(aes(color = Region))
mnthly_case_bplot2 + labs(y = "Mean Per Capita Daily Cases by Region",
title = "Box Plot of Monthly Per Capita Covid-19 Cases by Region")
mnthly_death_bplot2 = ggplot(state_mnthly_deaths,aes(month, avg_pc_deaths)) +
geom_boxplot(aes(color = Region))
mnthly_death_bplot2 + labs(y = "Mean Daily Per Capita Deaths by Region",
title = "Box Plot of Monthly Per Capita Covid-19 Deaths by Region")
# Color by density
mnthly_case_bplot3 = ggplot(state_mnthly_cases,aes(month, avg_pc_cases)) +
geom_boxplot(aes(color = Density2))
mnthly_case_bplot2 + labs(y = "Mean Per Capita Daily Cases by Density",
title = "Box Plot of Monthly Per Capita Covid-19 Cases by Density")
mnthly_death_bplot3 = ggplot(state_mnthly_deaths,aes(month, avg_pc_deaths)) +
geom_boxplot(aes(color = Density2))
mnthly_death_bplot2 + labs(y = "Mean Daily Per Capita Deaths by Desnsity",
title = "Box Plot of Monthly Per Capita Covid-19 Deaths by Density")
regions <- state.region
demographics <- state.x77
demographics = data.frame(demographics)
states_info <- data.frame("Name" = states_vect,"Region" = regions,"Pop"=demographics$Population)
options
par(mfrow=c(2,2))
for (val in states_vect)
{
# subset by state
dum <- subset(state_data3, state == val)
if (val == "Alabama"){
plot(dum$date,dum$pc_new_cases,"l",  xlab="Date", ylab="Dly Per Capita Cases",ylim=c(0,0.5e-2))
par(new = TRUE)
plot(dum$date,dum$pc_new_deaths,"l",  xlab="", ylab="",axes = FALSE,col = "dark red")
axis(side=4, col.axis = "dark red",col.ticks = "dark red", ylim=c(0,0.1e-4))
mtext("Daily Per Capita Deaths",side=4,line=3, col = "dark red")
title(val)
}else{
plot(dum$date,dum$pc_new_cases,"l",  xlab="", ylab="",ylim=c(0,0.5e-2))
par(new = TRUE)
plot(dum$date,dum$pc_new_deaths,"l",  xlab="", ylab="",axes = FALSE,col = "dark red")
axis(side=4, col.axis = "dark red",col.ticks = "dark red", ylim=c(0,0.1e-4))
title(val)}
}
View(state_mnthly_cases)
mnthly_death_bplot3 = ggplot(state_mnthly_deaths,aes(month, avg_pc_deaths)) +
geom_boxplot(aes(color = Density2))
mnthly_death_bplot2 + labs(y = "Mean Daily Per Capita Deaths by Desnsity",
title = "Box Plot of Monthly Per Capita Covid-19 Deaths by Density")
View(state_mnthly_deaths)
